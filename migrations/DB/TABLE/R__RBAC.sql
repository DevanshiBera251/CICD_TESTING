USE WAREHOUSE COMPUTE_WH;
--parameter for dev , uat , prod
set env = concat(replace('_',{{ENV_SUFFIX}}),'_CICD');
-- Modify variables here
set DATABASE_RAW_NAME = CONCAT('DB_',$env,'_RAW'); /* Set the name of database here*/
SET DATABASE_HORMONIZED_NAME = CONCAT('DB_',$env, '_HARMONIZED');
SET DATABASE_CONSUMPTION_NAME = CONCAT('DB_',$env,'_CONSUMPTION');
set RESOURCE_NOTIFY_USER = 'DEVANSHITRIAL'; 
set USER_NAME1 = 'DEVANSHITRIAL';
-- set USER_NAME4 = '';

-- USER PARAMETERS NAMES
set AWS_SNOWFLAKE_USER = 'AWS_SNF_USR';

--SET WH_PARAM_DEV = CONCAT('WH_',$env)
set INGESTION_WAREHOUSE = concat('WH_',$env,'_INGESTION_XS');   --WH_DEV_INGESTION_XS --DATALOADING_WAREHOUSE
set ENGINEER_WAREHOUSE = concat('WH_',$env,'_ENGINEER_XS');
set CONSUMPTION_WAREHOUSE = concat('WH_',$env,'_REPORTER_XS'); --CONSUMPTION
SET MASKING_WAREHOUSE = concat('WH_',$env,'_MASKING_XS');

set ADMIN_WAREHOUSE = concat('WH_',$env,'_ADMIN_XS');

--RESOURCE MONITOR PARAMETER NAMES 
--SET RM_PARAM_DEV='RMON_WH_DEV'
SET DATALODING_WH_MONITOR = CONCAT('RMON_','WH_',$env,'_INGESTION'); --ADMIN_WH_MONITOR
SET ENGINEER_WH_MONITOR = CONCAT('RMON_','WH_',$env,'_ENGINEER');
SET CONSUMPTION_WH_MONITOR = CONCAT('RMON_','WH_',$env,'_CONSUMPTION');
SET ADMIN_WH_MONITOR = CONCAT('RMON_','WH_',$env,'_ADMIN');

--ACCESS ANF FUNCTIONAL ROLES NAMES
--SET DEV_AR_PARAM = 'ROLE_AR_DEV_SCH'
SET HARMONIZED_SRW = CONCAT('ROLE_AR_',$env,'_SCH_COMMON_DATA_MODEL_SRW'); --HARMONIZED_RW
SET HARMONIZED_SRO = CONCAT('ROLE_AR_',$env,'_SCH_COMMON_DATA_MODEL_SRO'); --HARMONIZED_RO
SET HARMONIZED_SFULL = CONCAT('ROLE_AR_',$env,'_SCH_COMMON_DATA_MODEL_SFULL'); --HARMONIZED_ARW

SET CONSUMPTION_SRW = CONCAT('ROLE_AR_',$env,'_SCH_REPORTING_SRW'); --CONSUMPTION_RW
SET CONSUMPTION_SRO = CONCAT('ROLE_AR_',$env,'_SCH_REPORTING_SRO'); --CONSUMPTION_RO
SET CONSUMPTION_SFULL = CONCAT('ROLE_AR_',$env,'_SCH_REPORTING_SFULL'); --CONSUMPTION_ARW

SET RAW_FAST_SRW = CONCAT('ROLE_AR_',$env,'_SCH_FAST_SRW'); --RAW_FAST_RW
SET RAW_FAST_SRO = CONCAT('ROLE_AR_',$env,'_SCH_FAST_SRO'); --RAW_FAST_RO
SET RAW_FAST_SFULL = CONCAT('ROLE_AR_',$env,'_SCH_FAST_SFULL'); --RAW_FAST_ARW

SET RAW_ILIFE_SRW = CONCAT('ROLE_AR_',$env,'_SCH_ILIFE_SRW'); --UTILS_RO REPLACE THIS with new parameter below this  
                                                          --RAW_ILIFE_RW 
SET RAW_ILIFE_SRO = CONCAT('ROLE_AR_',$env,'_SCH_ILIFE_SRO'); --UTILS_RO
SET RAW_ILIFE_SFULL = CONCAT('ROLE_AR_',$env,'_SCH_ILIFE_SFULL'); --UTILS_ARW

--FUNCTIONAL ROLE NAMES CREATION
--SET DEV_FR_PARAM = 'ROLE_FR_DEV'
SET INGESTION = CONCAT('ROLE_FR_',$env,'_INGESTION');
SET ENGINEER = CONCAT('ROLE_FR_',$env,'_ENGINEER');
SET REPORTER = CONCAT('ROLE_FR_',$env,'_REPORTER');
SET MASKING = CONCAT('ROLE_FR_',$env,'_MASKING');

--SET DR_DEV_PARAM = 'ROLE_DR_DEV'
SET ADMIN = CONCAT('ROLE_','DR_',$env,'_ADMIN');

--SCHEMA NAMES CREATION
SET FAST_SCHEMA = CONCAT($DATABASE_RAW_NAME,'.SCH_FAST'); --UTILS_SCHEMA CHANGE THIS from UTILS_SCHEMA to fast 

SET ILIFE_SCHEMA = CONCAT($DATABASE_RAW_NAME,'.SCH_ILIFE');
SET HARMONIZED_SCHEMA = CONCAT($DATABASE_HORMONIZED_NAME,'.SCH_COMMON_DATA_MODEL');
SET CONSUMPTION_SCHEMA = CONCAT($DATABASE_CONSUMPTION_NAME,'.SCH_REPORTING');  

-- Create WAREHOUSES
USE ROLE SYSADMIN;

CREATE WAREHOUSE IF NOT EXISTS identifier($CONSUMPTION_WAREHOUSE) WITH WAREHOUSE_SIZE = 'X-SMALL' WAREHOUSE_TYPE = 'STANDARD' AUTO_SUSPEND = 60 AUTO_RESUME = TRUE MIN_CLUSTER_COUNT = 1  STATEMENT_TIMEOUT_IN_SECONDS = 1800;
CREATE WAREHOUSE IF NOT EXISTS identifier($ENGINEER_WAREHOUSE) WITH WAREHOUSE_SIZE = 'X-SMALL' WAREHOUSE_TYPE = 'STANDARD' AUTO_SUSPEND = 60 AUTO_RESUME = TRUE MIN_CLUSTER_COUNT = 1  STATEMENT_TIMEOUT_IN_SECONDS = 1800;
CREATE WAREHOUSE IF NOT EXISTS identifier($INGESTION_WAREHOUSE) WITH WAREHOUSE_SIZE = 'X-SMALL' WAREHOUSE_TYPE = 'STANDARD' AUTO_SUSPEND = 60 AUTO_RESUME = TRUE MIN_CLUSTER_COUNT = 1  STATEMENT_TIMEOUT_IN_SECONDS = 1800;
CREATE WAREHOUSE IF NOT EXISTS identifier($ADMIN_WAREHOUSE) WITH WAREHOUSE_SIZE = 'X-SMALL' WAREHOUSE_TYPE = 'STANDARD' AUTO_SUSPEND = 60 AUTO_RESUME = TRUE MIN_CLUSTER_COUNT = 1  STATEMENT_TIMEOUT_IN_SECONDS = 1800;

-- Create RESOURCE MONITORS
USE ROLE ACCOUNTADMIN;

CREATE RESOURCE MONITOR IF NOT EXISTS identifier($ADMIN_WH_MONITOR) WITH CREDIT_QUOTA = 10
NOTIFY_USERS = ($RESOURCE_NOTIFY_USER)
FREQUENCY =  DAILY START_TIMESTAMP = IMMEDIATELY 
TRIGGERS  ON 75 PERCENT DO NOTIFY 
          ON 85 PERCENT DO SUSPEND
		  ON 95 PERCENT DO SUSPEND_IMMEDIATE;

SELECT 'identifier($ADMIN_WH_MONITOR) CREATED'; 
CREATE RESOURCE MONITOR IF NOT EXISTS identifier($ENGINEER_WH_MONITOR) WITH CREDIT_QUOTA = 10
NOTIFY_USERS = ($RESOURCE_NOTIFY_USER)
FREQUENCY =  DAILY START_TIMESTAMP = IMMEDIATELY 
TRIGGERS  ON 75 PERCENT DO NOTIFY 
          ON 85 PERCENT DO SUSPEND
		  ON 95 PERCENT DO SUSPEND_IMMEDIATE;

SELECT 'identifier($ENGINEER_WH_MONITOR) CREATED';

CREATE RESOURCE MONITOR IF NOT EXISTS identifier($CONSUMPTION_WH_MONITOR) WITH CREDIT_QUOTA = 10
NOTIFY_USERS = ($RESOURCE_NOTIFY_USER)
FREQUENCY =  DAILY START_TIMESTAMP = IMMEDIATELY 
TRIGGERS  ON 75 PERCENT DO NOTIFY 
          ON 85 PERCENT DO SUSPEND
		  ON 95 PERCENT DO SUSPEND_IMMEDIATE;

SELECT 'identifier($CONSUMPTION_WH_MONITOR) CREATED';
CREATE RESOURCE MONITOR IF NOT EXISTS identifier($DATALODING_WH_MONITOR) WITH CREDIT_QUOTA = 10
NOTIFY_USERS = ($RESOURCE_NOTIFY_USER)
FREQUENCY =  DAILY START_TIMESTAMP = IMMEDIATELY 
TRIGGERS  ON 75 PERCENT DO NOTIFY 
          ON 85 PERCENT DO SUSPEND
		  ON 95 PERCENT DO SUSPEND_IMMEDIATE;

SELECT 'identifier($DATALODING_WH_MONITOR) CREATED';		  
--ASSIGN RESOURCE MONITORS to Warehouse
USE ROLE ACCOUNTADMIN;

ALTER WAREHOUSE identifier($CONSUMPTION_WAREHOUSE) SET RESOURCE_MONITOR = $CONSUMPTION_WH_MONITOR;
ALTER WAREHOUSE identifier($ENGINEER_WAREHOUSE) SET RESOURCE_MONITOR = $ENGINEER_WH_MONITOR;
ALTER WAREHOUSE identifier($INGESTION_WAREHOUSE) SET RESOURCE_MONITOR = $DATALODING_WH_MONITOR;
ALTER WAREHOUSE identifier($ADMIN_WAREHOUSE) SET RESOURCE_MONITOR = $ADMIN_WH_MONITOR;

--Database Creation
USE ROLE SYSADMIN;

--CREATE DATABASE IF NOT EXISTS identifier($DATABASE_RAW_NAME);

---Schema Creation 
--RAW LAYER - FAST AND ILIFE
USE ROLE SYSADMIN;

USE DATABASE identifier($DATABASE_RAW_NAME);
CREATE SCHEMA IF NOT EXISTS identifier($FAST_SCHEMA);
CREATE SCHEMA IF NOT EXISTS identifier($ILIFE_SCHEMA);

--HARMONIZED LAYER 
USE ROLE SYSADMIN;
--CREATE DATABASE IF NOT EXISTS identifier($DATABASE_HORMONIZED_NAME);

USE DATABASE identifier($DATABASE_HORMONIZED_NAME);
CREATE SCHEMA IF NOT EXISTS identifier($HARMONIZED_SCHEMA);

USE ROLE SYSADMIN;
--CREATE DATABASE IF NOT EXISTS identifier($DATABASE_CONSUMPTION_NAME);
USE DATABASE identifier($DATABASE_CONSUMPTION_NAME);
USE ROLE SYSADMIN;
CREATE SCHEMA IF NOT EXISTS identifier($CONSUMPTION_SCHEMA);





-- RBAC Scripts

-------------------------------ACCESS ROLES Creation----------------------------
USE ROLE USERADMIN;
 
--HARMONIZED LAYER ACCESS ROLES
CREATE ROLE IF NOT EXISTS identifier($HARMONIZED_SRW); 
CREATE ROLE IF NOT EXISTS identifier($HARMONIZED_SRO);
CREATE ROLE IF NOT EXISTS identifier($HARMONIZED_SFULL);

--CONSUMPTION LAYER ACCESS ROLES 
CREATE ROLE IF NOT EXISTS identifier($CONSUMPTION_SRW); 
CREATE ROLE IF NOT EXISTS identifier($CONSUMPTION_SRO);
CREATE ROLE IF NOT EXISTS identifier($CONSUMPTION_SFULL);

--RAW LAYER ACCESS ROLES - FAST 
CREATE ROLE IF NOT EXISTS identifier($RAW_FAST_SRW);  --raw_rw replace this with raw_fast_rw
CREATE ROLE IF NOT EXISTS identifier($RAW_FAST_SRO); --raw_ro
CREATE ROLE IF NOT EXISTS identifier($RAW_FAST_SFULL); --raw_arw

--RAW LAYER ACCESS ROLES - ILIFE
CREATE ROLE IF NOT EXISTS identifier($RAW_ILIFE_SRW); --UTILS_RW replace this with 
CREATE ROLE IF NOT EXISTS identifier($RAW_ILIFE_SRO); --UTILS_RO
CREATE ROLE IF NOT EXISTS identifier($RAW_ILIFE_SFULL); --UTILS_ARW

-------------------------------FUNCTIONAL ROLES Creation----------------------------
USE ROLE USERADMIN;

CREATE ROLE IF NOT EXISTS identifier($INGESTION); 
CREATE ROLE IF NOT EXISTS identifier($REPORTER);
CREATE ROLE IF NOT EXISTS identifier($ENGINEER);

CREATE ROLE IF NOT EXISTS identifier($MASKING);


-------------------------------DOMAIN ROLES Creation----------------------------

CREATE ROLE IF NOT EXISTS identifier($ADMIN);

--------------------------------------------------GRANT ACCESS ROLES TO FUNCTIONAL / DOMAIN ROLE---------

USE ROLE SECURITYADMIN;
-- DATA LOADER (READ AND WRITE)
GRANT ROLE identifier($RAW_ILIFE_SRW) TO ROLE identifier($INGESTION);
GRANT ROLE identifier($RAW_FAST_SRW) TO ROLE identifier($INGESTION);

--CONSUMPTION(READ ONLY)
GRANT ROLE identifier($HARMONIZED_SRO) TO ROLE identifier($REPORTER);
GRANT ROLE identifier($CONSUMPTION_SRO) TO ROLE identifier($REPORTER);
GRANT ROLE identifier($RAW_FAST_SRO) TO ROLE identifier($REPORTER);
GRANT ROLE identifier($RAW_ILIFE_SRO) TO ROLE identifier($REPORTER);

 
--ENGINEER ROLE (READ AND WRITE ROLE)
GRANT ROLE identifier($HARMONIZED_SRW) TO ROLE identifier($ENGINEER);
GRANT ROLE identifier($CONSUMPTION_SRW) TO ROLE identifier($ENGINEER);
GRANT ROLE identifier($RAW_FAST_SRW) TO ROLE identifier($ENGINEER);  -- made change here
GRANT ROLE identifier($RAW_ILIFE_SRW) TO ROLE identifier($ENGINEER); -- made change here

----Domain roles(ADVANCED READ AND WRITE)
GRANT ROLE identifier($HARMONIZED_SFULL) TO ROLE identifier($ADMIN);
GRANT ROLE identifier($CONSUMPTION_SFULL) TO ROLE identifier($ADMIN);
GRANT ROLE identifier($RAW_FAST_SFULL) TO ROLE identifier($ADMIN);
GRANT ROLE identifier($RAW_ILIFE_SFULL) TO ROLE identifier($ADMIN);

 
-------------------------------------- GRANT FUNCTIONAL Roles to SYSADMIN ---------------------------------

grant role identifier($ENGINEER) to ROLE SYSADMIN;
grant role identifier($REPORTER) to ROLE SYSADMIN;
grant role identifier($INGESTION) to ROLE SYSADMIN;

-------------------------------------- GRANT DOMAIN Roles to SYSADMIN ---------------------------------

grant role identifier($ADMIN) to ROLE SYSADMIN;

-------------------------------------- GRANT WAREHOUSE USAGE TO FUNCTIONAL ROLE --------------------------
USE ROLE SECURITYADMIN;

GRANT USAGE ON WAREHOUSE identifier($CONSUMPTION_WAREHOUSE) TO ROLE identifier($REPORTER);
GRANT USAGE ON WAREHOUSE identifier($ENGINEER_WAREHOUSE) TO ROLE identifier($ENGINEER);
GRANT USAGE ON WAREHOUSE identifier($INGESTION_WAREHOUSE) TO ROLE identifier($INGESTION);
GRANT USAGE ON WAREHOUSE identifier($ADMIN_WAREHOUSE) TO ROLE identifier($ADMIN);

---------------------------------- For Task Execution-------------------------------------------------------
--GRANT USAGE ON WAREHOUSE identifier($INGESTION_WAREHOUSE) TO ROLE identifier($ADMIN);

------------------------------------------RAW DATABASE ,WAREHOUSE access and RESOURCE MONITOR ACCESS TO DOMAIN ROLE-----------------------------
USE ROLE SECURITYADMIN;
-- DATABASES

GRANT ALL ON DATABASE  identifier($DATABASE_RAW_NAME)  TO ROLE identifier($ADMIN);

-- WAREHOUSES 
GRANT ALL ON WAREHOUSE identifier($ADMIN_WAREHOUSE) TO ROLE identifier($ADMIN);

-- RESOURCE MONITORS
GRANT MONITOR ON RESOURCE MONITOR identifier($ADMIN_WH_MONITOR) TO ROLE identifier($ADMIN);
GRANT MONITOR ON RESOURCE MONITOR identifier($DATALODING_WH_MONITOR) TO ROLE identifier($INGESTION);
GRANT MONITOR ON RESOURCE MONITOR identifier($ENGINEER_WH_MONITOR) TO ROLE identifier($ENGINEER);
GRANT MONITOR ON RESOURCE MONITOR identifier($CONSUMPTION_WH_MONITOR) TO ROLE identifier($REPORTER);

-------------------------GRANT PRIVILEGES TO ACCESS ROLES ON DATABASE OBJECTS----------------------
--RAW_FAST_SRO for FAST SCHEMA 
GRANT USAGE ON DATABASE identifier($DATABASE_RAW_NAME) TO ROLE identifier($RAW_FAST_SRO);
GRANT USAGE ON SCHEMA identifier($FAST_SCHEMA)  TO ROLE identifier($RAW_FAST_SRO);

GRANT SELECT ON ALL TABLES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRO);
GRANT SELECT ON FUTURE TABLES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRO);

GRANT USAGE ON ALL SEQUENCES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRO);
GRANT USAGE ON FUTURE SEQUENCES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRO);

GRANT SELECT, REFERENCES ON ALL VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRO);
GRANT SELECT, REFERENCES ON FUTURE VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRO);

GRANT SELECT, REFERENCES ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRO);
GRANT SELECT, REFERENCES ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRO);

---------------------------------------------------------------------------------------------------------------------

--RAW_ILIFE_SRO for ILIFE SCHEMA 
GRANT USAGE ON DATABASE identifier($DATABASE_RAW_NAME) TO ROLE identifier($RAW_ILIFE_SRO);
GRANT USAGE ON SCHEMA identifier($ILIFE_SCHEMA)  TO ROLE identifier($RAW_ILIFE_SRO);

GRANT SELECT ON ALL TABLES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRO);
GRANT SELECT ON FUTURE TABLES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRO);

GRANT USAGE ON ALL SEQUENCES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRO);
GRANT USAGE ON FUTURE SEQUENCES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRO);

GRANT SELECT, REFERENCES ON ALL VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRO);
GRANT SELECT, REFERENCES ON FUTURE VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRO);

GRANT SELECT, REFERENCES ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRO);
GRANT SELECT, REFERENCES ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRO);

---------------------------------------------------------------------------------------------------------------------
--RAW_FAST_SRW
GRANT USAGE ON DATABASE identifier($DATABASE_RAW_NAME) TO ROLE identifier($RAW_FAST_SRW);
GRANT USAGE ON SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT USAGE ON ALL SEQUENCES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT USAGE ON FUTURE SEQUENCES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON ALL TABLES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON FUTURE TABLES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT SELECT, REFERENCES ON ALL VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT SELECT, REFERENCES ON FUTURE VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT SELECT, REFERENCES ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT SELECT, REFERENCES ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT USAGE ON ALL STAGES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT USAGE ON FUTURE STAGES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT USAGE ON ALL FILE FORMATS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT USAGE ON FUTURE FILE FORMATS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT SELECT ON ALL STREAMS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT SELECT ON FUTURE STREAMS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT MONITOR,OPERATE ON ALL TASKS  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT MONITOR,OPERATE ON FUTURE TASKS  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT USAGE ON  ALL FUNCTIONS  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT USAGE ON  FUTURE FUNCTIONS  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT USAGE ON  ALL PROCEDURES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
GRANT USAGE ON  FUTURE PROCEDURES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);

GRANT MONITOR ON FUTURE PIPES  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SRW);
----------------------------------------------------------------------------------------------------
--RAW_ILIFE_SRW
GRANT USAGE ON DATABASE identifier($DATABASE_RAW_NAME) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT USAGE ON SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT USAGE ON ALL SEQUENCES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT USAGE ON FUTURE SEQUENCES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON ALL TABLES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON FUTURE TABLES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT SELECT, REFERENCES ON ALL VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT SELECT, REFERENCES ON FUTURE VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT SELECT, REFERENCES ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT SELECT, REFERENCES ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT USAGE ON ALL STAGES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT USAGE ON FUTURE STAGES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT USAGE ON ALL FILE FORMATS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT USAGE ON FUTURE FILE FORMATS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT SELECT ON ALL STREAMS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT SELECT ON FUTURE STREAMS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT MONITOR,OPERATE ON ALL TASKS  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT MONITOR,OPERATE ON FUTURE TASKS  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT USAGE ON  ALL FUNCTIONS  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT USAGE ON  FUTURE FUNCTIONS  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT USAGE ON  ALL PROCEDURES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
GRANT USAGE ON  FUTURE PROCEDURES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);

GRANT MONITOR ON FUTURE PIPES  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SRW);
----------------------------------------------------------------------------------------------------

--RAW_FAST_SFULL

GRANT USAGE ON DATABASE identifier($DATABASE_RAW_NAME) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL TABLES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE TABLES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL SEQUENCES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE SEQUENCES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL FILE FORMATS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE FILE FORMATS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL STAGES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE STAGES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL STREAMS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE STREAMS IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL TASKS  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE TASKS  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL FUNCTIONS  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE FUNCTIONS  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON ALL PROCEDURES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
GRANT ALL ON FUTURE PROCEDURES IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);

GRANT ALL ON FUTURE PIPES  IN SCHEMA identifier($FAST_SCHEMA) TO ROLE identifier($RAW_FAST_SFULL);
------------------------------------------------------------------------------------------------------

--RAW_ILIFE_SFULL

GRANT USAGE ON DATABASE identifier($DATABASE_RAW_NAME) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL TABLES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE TABLES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL SEQUENCES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE SEQUENCES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL FILE FORMATS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE FILE FORMATS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL STAGES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE STAGES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL STREAMS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE STREAMS IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL TASKS  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE TASKS  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL FUNCTIONS  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE FUNCTIONS  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON ALL PROCEDURES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);
GRANT ALL ON FUTURE PROCEDURES IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

GRANT ALL ON FUTURE PIPES  IN SCHEMA identifier($ILIFE_SCHEMA) TO ROLE identifier($RAW_ILIFE_SFULL);

------------------------------------------------------------------------------------------

--HARMONIZED_SRO
GRANT USAGE ON DATABASE identifier($DATABASE_HORMONIZED_NAME) TO ROLE identifier($HARMONIZED_SRO);
GRANT USAGE ON SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRO);

GRANT SELECT ON ALL TABLES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRO);
GRANT SELECT ON FUTURE TABLES IN SCHEMA identifier($HARMONIZED_SCHEMA)  TO ROLE identifier($HARMONIZED_SRO);

GRANT USAGE ON ALL SEQUENCES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRO);
GRANT USAGE ON FUTURE SEQUENCES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRO);

GRANT SELECT,REFERENCES ON ALL VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRO);
GRANT SELECT,REFERENCES ON FUTURE VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRO);

GRANT SELECT,REFERENCES ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRO);
GRANT SELECT,REFERENCES ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRO);
---------------------------------------------------------------------------
--HARMONIZED_SRW
GRANT USAGE ON DATABASE identifier($DATABASE_HORMONIZED_NAME) TO ROLE identifier($HARMONIZED_SRW);
GRANT USAGE ON SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT USAGE ON ALL SEQUENCES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT USAGE ON FUTURE SEQUENCES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT USAGE ON ALL STAGES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT USAGE ON FUTURE STAGES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT USAGE ON ALL FILE FORMATS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT USAGE ON FUTURE FILE FORMATS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON ALL TABLES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON FUTURE TABLES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT SELECT, REFERENCES ON ALL VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT SELECT, REFERENCES ON FUTURE VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT SELECT,REFERENCES ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT SELECT,REFERENCES ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT SELECT ON ALL STREAMS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT SELECT ON FUTURE STREAMS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT MONITOR,OPERATE ON ALL TASKS  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT MONITOR,OPERATE ON FUTURE TASKS  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT USAGE ON  ALL FUNCTIONS  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT USAGE ON  FUTURE FUNCTIONS  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT USAGE ON  ALL PROCEDURES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);
GRANT USAGE ON  FUTURE PROCEDURES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

GRANT MONITOR ON FUTURE PIPES  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SRW);

---------------------------------------------------------------------------------------------------------------
--HARMONIZED_SFULL
GRANT USAGE ON DATABASE identifier($DATABASE_HORMONIZED_NAME) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL TABLES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE TABLES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL SEQUENCES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE SEQUENCES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL FILE FORMATS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE FILE FORMATS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL STAGES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE STAGES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL STREAMS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE STREAMS IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL TASKS  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE TASKS  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL FUNCTIONS  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE FUNCTIONS  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON ALL PROCEDURES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);
GRANT ALL ON FUTURE PROCEDURES IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

GRANT ALL ON FUTURE PIPES  IN SCHEMA identifier($HARMONIZED_SCHEMA) TO ROLE identifier($HARMONIZED_SFULL);

------------------------------------------------------------------------------------------------------
--CONSUMPTION_SRO
GRANT USAGE ON DATABASE identifier($DATABASE_CONSUMPTION_NAME) TO ROLE identifier($CONSUMPTION_SRO);
GRANT USAGE ON SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SRO);

GRANT SELECT ON ALL TABLES IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRO);
GRANT SELECT ON FUTURE TABLES IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRO);

GRANT USAGE ON ALL SEQUENCES IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRO);
GRANT USAGE ON FUTURE SEQUENCES IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRO);

GRANT SELECT, REFERENCES ON ALL VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRO);
GRANT SELECT, REFERENCES ON FUTURE VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRO);

GRANT SELECT, REFERENCES ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRO);
GRANT SELECT, REFERENCES ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRO);

---------------------------------------------------------------------------------------------------------
--CONSUMPTION RW
GRANT USAGE ON DATABASE identifier($DATABASE_CONSUMPTION_NAME) TO ROLE identifier($CONSUMPTION_SRW);
GRANT USAGE ON SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRW);

GRANT USAGE ON ALL SEQUENCES IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRW);
GRANT USAGE ON FUTURE SEQUENCES IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRW);

GRANT SELECT, INSERT, UPDATE, REFERENCES ON ALL TABLES IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRW);
GRANT SELECT, INSERT, UPDATE, REFERENCES ON FUTURE TABLES IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRW);

GRANT SELECT, REFERENCES ON ALL VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRW);
GRANT SELECT, REFERENCES ON FUTURE VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRW);

GRANT SELECT, REFERENCES ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRW);
GRANT SELECT, REFERENCES ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA) TO ROLE identifier($CONSUMPTION_SRW);

--------------------------------------------------------------------------------------------------------
--CONSUMPTION_SFULL
GRANT USAGE ON DATABASE identifier($DATABASE_CONSUMPTION_NAME) TO ROLE identifier($CONSUMPTION_SFULL);
GRANT ALL ON SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SFULL);

GRANT ALL ON ALL TABLES IN SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SFULL);
GRANT ALL ON FUTURE TABLES IN SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SFULL);

GRANT ALL ON ALL VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SFULL);
GRANT ALL ON FUTURE VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SFULL);

GRANT ALL ON ALL MATERIALIZED VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SFULL);
GRANT ALL ON FUTURE MATERIALIZED VIEWS IN SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SFULL);

GRANT ALL ON ALL SEQUENCES IN SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SFULL);
GRANT ALL ON FUTURE SEQUENCES IN SCHEMA identifier($CONSUMPTION_SCHEMA)  TO ROLE identifier($CONSUMPTION_SFULL);

------------------------- Role Assignment to USers ---------------------------------------
USE ROLE SECURITYADMIN;
--GRANT ROLE identifier($REPORTER) TO USER identifier($SUPERSET_USER);

GRANT ROLE identifier($REPORTER) TO USER identifier($USER_NAME1);
GRANT ROLE identifier($INGESTION) TO USER identifier($USER_NAME1);
GRANT ROLE identifier($ENGINEER) TO USER identifier($USER_NAME1);

